headers:
  - option: 
    - '-H'
    - "--header"
  - type: string
  - default: '{}'
  - save_content: true
  - help: "add custom header (ex:-H='Cookies: test=1')"
  - exec: "dict_args['headers'] = extract_headers(value)"

log_info:
  - option: 
    - '-v'
    - '--logger-mode'
  - type: int
  - default: 1
  - save_content: true
  - help: 'change debug messages mode (1: info 2: debug 3: warning 4: error)'
  - exec: |
      logs = {1:logging.INFO,2:logging.DEBUG,3:logging.WARNING,4:logging.ERROR}
      logger = logging.getLogger("scant3r")
      logger.setLevel(logs[value])
      ch = logging.StreamHandler()
      ch.setLevel(logs[value])
      ch.setFormatter(CustomFormatter())
      logger.addHandler(ch)

delay:
  - option: 
    - '-s'
    - '--sleep'
  - type: int
  - default: 0
  - save_content: true
  - help: 'number of seconds to hold between each HTTP(S) requests.'
  - exec: "dict_args['delay'] = int(value)"

content_types:
    - option:
        - '-c'
        - '--content-types'
    - type: list
    - default: plane
    - save_content: true
    - help: 'content type support'
    - exec: |
        idkk = []
        try:
            idk = yaml.safe_load(open('conf/content_types.yaml','r'))
            for i in value.split(','):
                try:
                    i = idk[i]
                    for c in i:
                        idkk.append(c)
                except:
                    pass
        finally:
            dict_args["content_types"] = idkk
api:
  - option: 
    - '-a'
    - '--api'
  - type: boolean
  - default: false
  - save_content: false
  - help: 'Start Scant3r API'
  - exec: "dict_args['api'] = True"
      
methods:
  - option: 
    - '-y'
    - '--method'
  - type: string
  - default: 'GET,POST'
  - save_content: true
  - help: 'Methods Allowed on your target'
  - exec: | 
      dict_args['methods'] = value.split(",")
    

modules:
  - option: 
    - '-m'
    - '--module'
  - help: 'run scant3r module (ex: -m=example)'
  - type: string
  - default: '[]'
  - save_content: true
  - exec: |
      dict_args['modules'] = value.split(",")

nologo :
  - option: 
    - '-n'
    - '--no-logo'
  - help: 'Silent Mode'
  - type: boolean
  - default: false
  - save_content: false
  - exec: "dict_args['nologo'] = value"
  
targetlist:
  - option: 
    - '-l'
    - '--list'
  - type: boolean
  - default: False
  - help: 'add targets list'
  - save_content: true
  - exec: |
        try:
          dict_args['targetlist'] = open(value,'r')
          for url in dict_args['targetlist']:
            dict_args['urls'].append(url.rstrip())
        except Exception as e:
            print(e)
            exit()

genparam:
  - option: 
    - '-g'
    - '--add-parameters'
  - type: boolean
  - default: false
  - help: "Generate Famouse Parameters if your url dosen't have parameters"
  - save_content: false
  - exec: "dict_args['genparam'] = value"

proxy:
  - option: 
    - '-p'
    - '--proxy'
  - help: 'Forward all requests to proxy'
  - type: string
  - default: '{}'
  - save_content: true
  - exec: "dict_args['proxy'] = {'http':value,'https':value}"

allow_redirects:
  - option: 
    - '-r'
    - '--follow-redirects'
  - type: boolean
  - default: false
  - help: 'Follow redirects'
  - save_content: false
  - exec: "dict_args['allow_redirects'] = value"

blindxss:
  - option:
    - '-b'
    - '--blind-host'
  - type: string
  - default: ''
  - help: 'add your xsshunter host (or any xss host)'
  - save_content: true
  - exec: "dict_args['blindxss'] = value"

debug:
  - option: 
    - '-d'
    - '--debug'
  - help: 'debugging mode (show requests/responses)'
  - type: boolean
  - default: false
  - save_content: false
  - exec: "dict_args['debug'] = True"

host:
  - option: 
    - '-x'
    - '--host'
  - type: string
  - default: ''
  - help: 'add your host (burpcall,etc..)'
  - save_content: true
  - exec: "dict_args['host'] = value"

random_agents:
  - option: 
    - '-R'
    - '--random-agents'
  - type: boolean
  - default: false
  - help: 'use random user agent'
  - save_content: false
  - exec: "dict_args['random_agents'] = True"

threads:
  - option: 
    - '-w'
    - '--workers'
  - type: int
  - default: 50
  - help: 'Number of workers (default: 50)'
  - save_content: true
  - exec: "dict_args['threads'] = value"

timeout:
  - option: 
    - '-t'
    - '--timeout'
  - type: int
  - default: 10
  - help: 'set connection timeout (default: 10)'
  - save_content: true
  - exec: "dict_args['timeout'] = value"
